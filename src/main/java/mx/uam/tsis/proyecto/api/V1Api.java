/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package mx.uam.tsis.proyecto.api;

import mx.uam.tsis.proyecto.api.dto.EmpleadoDto;
import mx.uam.tsis.proyecto.api.dto.ErrorDto;
import mx.uam.tsis.proyecto.api.dto.ListaEmpleadosDto;
import mx.uam.tsis.proyecto.api.dto.ListaServiciosDto;
import mx.uam.tsis.proyecto.api.dto.ListaUsuariosDto;
import mx.uam.tsis.proyecto.api.dto.ServicioDto;
import mx.uam.tsis.proyecto.api.dto.UsuarioDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-04T20:52:40.169-05:00[America/Mexico_City]")
@Validated
public interface V1Api {

    @Operation(summary = "regresa una lista con todos los empleados", description = "", tags={ "empleados" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Empleados recuperados exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListaEmpleadosDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontraron empleados", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/empleados",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1EmpleadosGet();


    @Operation(summary = "Elimina la información de un empleado con su id", description = "", tags={ "empleados" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Empleado eliminado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmpleadoDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el usuario, usuario invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/empleados/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmpleadoDto> v1EmpleadosIdDelete(@Parameter(in = ParameterIn.PATH, description = "id del Empleado", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Recupera la información de un empleado con su id", description = "", tags={ "empleados" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Empleado recuperado exitósamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmpleadoDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el empleado solicitado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/empleados/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> v1EmpleadosIdGet(@Parameter(in = ParameterIn.PATH, description = "id del empleado", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Actualiza la información de un empleado con su id", description = "", tags={ "empleados" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Empleado actualizado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmpleadoDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el usuario, usuario invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo actualizar exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/empleados/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<EmpleadoDto> v1EmpleadosIdPatch(@Parameter(in = ParameterIn.PATH, description = "id del empleado", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody EmpleadoDto body);


    @Operation(summary = "Inserta la información de un nuevo usuario", description = "", tags={ "empleados" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "El usuario empleado fue registrado correctamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmpleadoDto.class))),
        
        @ApiResponse(responseCode = "409", description = "Usuario existente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/empleados",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EmpleadoDto> v1EmpleadosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody EmpleadoDto body);


    @Operation(summary = "regresa una lista con todos los servicios", description = "", tags={ "servicios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Servicios recuperados exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListaServiciosDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontraron servicios", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/servicios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListaServiciosDto> v1ServiciosGet();


    @Operation(summary = "Elimina la información de un servicio con su id", description = "", tags={ "servicios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Empleado eliminado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmpleadoDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró la informacion") })
    @RequestMapping(value = "/v1/servicios/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmpleadoDto> v1ServiciosIdDelete(@Parameter(in = ParameterIn.PATH, description = "id del Empleado", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Actualiza la información de un servicio con su id", description = "", tags={ "servicios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Servicio actualizado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ServicioDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el servicio, servicio invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo actualizar exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/servicios/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<ServicioDto> v1ServiciosIdPatch(@Parameter(in = ParameterIn.PATH, description = "id del servicio", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ServicioDto body);


    @Operation(summary = "Inserta la informacion de un nuevo servicio", description = "", tags={ "servicios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "El servicio fue registrado correctamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ServicioDto.class))),
        
        @ApiResponse(responseCode = "409", description = "Servicio existente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/servicios",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ServicioDto> v1ServiciosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ServicioDto body);


    @Operation(summary = "regresa una lista con todos los usuarios", description = "", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Usuarios recuperados exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListaUsuariosDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontraron usuarios", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/usuarios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListaUsuariosDto> v1UsuariosGet();


    @Operation(summary = "Elimina la información de un usuario con su id", description = "", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "usuario eliminado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el usuario, usuario invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/usuarios/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<UsuarioDto> v1UsuariosIdDelete(@Parameter(in = ParameterIn.PATH, description = "id del usuario", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Recupera la informacion de un usuario con su id", description = "", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Usuario recuperado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el usuario", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/usuarios/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UsuarioDto> v1UsuariosIdGet(@Parameter(in = ParameterIn.PATH, description = "id del usuario", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Actualiza la información de un usuario con su id", description = "", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Usuario actualizado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontro el usuario, usuario invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo actualizar exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/usuarios/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<UsuarioDto> v1UsuariosIdPatch(@Parameter(in = ParameterIn.PATH, description = "id del usuario", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UsuarioDto body);


    @Operation(summary = "Inserta la información de un nuevo usuario", description = "", tags={ "usuarios" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "El usuario fue registrado correctamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UsuarioDto.class))),
        
        @ApiResponse(responseCode = "409", description = "Usuario existente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/usuarios",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> v1UsuariosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UsuarioDto body);

}

